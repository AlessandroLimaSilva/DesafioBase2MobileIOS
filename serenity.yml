version: 0.1

# Phases are collection of commands that get executed on Device Farm.
phases:
  # The install phase includes commands that install dependencies that your tests use.
  # Default dependencies for testing frameworks supported on Device Farm are already installed.
  install:
    commands:
      - export NVM_DIR=$HOME/.nvm
      - . $NVM_DIR/nvm.sh
      - nvm install 14.19.1
      - export APPIUM_VERSION=1.22.2
      - avm $APPIUM_VERSION
      - ln -s /usr/local/avm/versions/$APPIUM_VERSION/node_modules/.bin/appium  /usr/local/avm/versions/$APPIUM_VERSION/node_modules/appium/bin/appium.js
      - cd $DEVICEFARM_TEST_PACKAGE_PATH
      - curl -O -k https://dlcdn.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.zip
      - ls -a
      - unzip apache-maven-3.8.8-bin.zip
      - export PATH=$PATH:$DEVICEFARM_TEST_PACKAGE_PATH/apache-maven-3.8.8/bin
      - java -version

      # Device farm provides different pre-built versions of WebDriverAgent, and each is suggested for different versions of Appium:
      # DEVICEFARM_WDA_DERIVED_DATA_PATH_V6: this version is suggested for Appium 1.18.2, 1.18.3, and 1.19.0. V6 is built from the following source code: https://github.com/appium/WebDriverAgent/releases/tag/v2.20.8
      # DEVICEFARM_WDA_DERIVED_DATA_PATH_V5: this version is suggested for Appium 1.18.0 and 1.18.1. V5 is built from the following source code: https://github.com/appium/WebDriverAgent/releases/tag/v2.20.2
      # DEVICEFARM_WDA_DERIVED_DATA_PATH_V4: this version is suggested for Appium 1.17.1. V4 is built from the following source code: https://github.com/appium/WebDriverAgent/releases/tag/v2.14.1
      # DEVICEFARM_WDA_DERIVED_DATA_PATH_V3: this version is suggested for Appium 1.16.0. V3 is built from the following source code: https://github.com/appium/WebDriverAgent/releases/tag/v2.3.2
      # DEVICEFARM_WDA_DERIVED_DATA_PATH_V2: this version is suggested for Appium 1.15.1. V2 is built from the following source code: https://github.com/appium/WebDriverAgent/tree/v1.3.5
      # DEVICEFARM_WDA_DERIVED_DATA_PATH_V1: this version is suggested for Appium 1.9.1 through 1.14.2. V1 is built from the following source code: https://github.com/appium/WebDriverAgent/tree/2dbbf917ec2e4707bae9260f701d43c82b55e1b9
      # We will automatically configure your WebDriverAgent version based on your Appium version using the following code.

      # For users of Appium versions 1.15.0 and higher, your Appium version requires that the UDID of the device not contain any "-" characters
      # So, we will create a new environment variable of the UDID specifically for Appium based on your Appium version
      - >-
        if [ $(echo $APPIUM_VERSION | cut -d "." -f4) -ge 19 ];
        then
          DEVICEFARM_DEVICE_UDID_FOR_APPIUM=$(echo $DEVICEFARM_DEVICE_UDID | tr -d "-");
          DEVICEFARM_WDA_DERIVED_DATA_PATH=$DEVICEFARM_WDA_DERIVED_DATA_PATH_V6;
        elif [ $(echo $APPIUM_VERSION | cut -d "." -f2) -ge 19 ];
        then
          DEVICEFARM_DEVICE_UDID_FOR_APPIUM=$(echo $DEVICEFARM_DEVICE_UDID | tr -d "-");
          DEVICEFARM_WDA_DERIVED_DATA_PATH=$DEVICEFARM_WDA_DERIVED_DATA_PATH_V6;
        elif [ $(echo $APPIUM_VERSION | cut -d "." -f2) -ge 18 ];
        then
          DEVICEFARM_DEVICE_UDID_FOR_APPIUM=$(echo $DEVICEFARM_DEVICE_UDID | tr -d "-");
          DEVICEFARM_WDA_DERIVED_DATA_PATH=$DEVICEFARM_WDA_DERIVED_DATA_PATH_V5;
        elif [ $(echo $APPIUM_VERSION | cut -d "." -f2) -ge 17 ];
        then
          DEVICEFARM_DEVICE_UDID_FOR_APPIUM=$(echo $DEVICEFARM_DEVICE_UDID | tr -d "-");
          DEVICEFARM_WDA_DERIVED_DATA_PATH=$DEVICEFARM_WDA_DERIVED_DATA_PATH_V4;
        elif [ $(echo $APPIUM_VERSION | cut -d "." -f2) -ge 16 ];
        then
          DEVICEFARM_DEVICE_UDID_FOR_APPIUM=$(echo $DEVICEFARM_DEVICE_UDID | tr -d "-");
          DEVICEFARM_WDA_DERIVED_DATA_PATH=$DEVICEFARM_WDA_DERIVED_DATA_PATH_V3;
        elif [ $(echo $APPIUM_VERSION | cut -d "." -f2) -ge 15 ];
        then
          DEVICEFARM_DEVICE_UDID_FOR_APPIUM=$(echo $DEVICEFARM_DEVICE_UDID | tr -d "-");
          DEVICEFARM_WDA_DERIVED_DATA_PATH=$DEVICEFARM_WDA_DERIVED_DATA_PATH_V2;
        else
          DEVICEFARM_DEVICE_UDID_FOR_APPIUM=$DEVICEFARM_DEVICE_UDID;
          DEVICEFARM_WDA_DERIVED_DATA_PATH=$DEVICEFARM_WDA_DERIVED_DATA_PATH_V1;
        fi

      - echo "UDID = " $DEVICEFARM_DEVICE_UDID
      - echo "NOVO UDID = " $DEVICEFARM_DEVICE_UDID_FOR_APPIUM

  # The pre-test phase includes commands that setup your test environment.
  pre_test:
    commands:
      # Setup environment variables for java
      - export CLASSPATH=$CLASSPATH:$DEVICEFARM_TESTNG_JAR
      - export CLASSPATH=$CLASSPATH:$DEVICEFARM_TEST_PACKAGE_PATH/*
      - export CLASSPATH=$CLASSPATH:$DEVICEFARM_TEST_PACKAGE_PATH/dependency-jars/*
      # We recommend starting appium server process in the background using the command below.
      # Appium server log will go to $DEVICEFARM_LOG_DIR directory.
      # The environment variables below will be auto-populated during run time.

      # Device Farm devices vary in what versions of Chrome and WebView they have.
      # By default, this test spec file will enable Appium to download the corresponding versions of Chromedriver from https://chromedriver.storage.googleapis.com/
      # To override this behavior, feel free to set the CHROMEDRIVER_CDNURL environment variable to another CDN. For example:
      # - export CHROMEDRIVER_CDNURL=https://chromedriver.storage.googleapis.com
      # For more information, please see https://github.com/appium/appium-uiautomator2-driver#troubleshooting-chromedriver-download-issues
      # Moreover, Appium downloads Chromedriver using a feature that is considered insecure for multitenant environments.
      # This is not a problem for Device Farm because each test host is allocated exclusively for one customer, then terminated entirely.
      # For more information, please see https://github.com/appium/appium/blob/master/packages/appium/docs/en/guides/security.md

      - echo "Start appium server"
      - >-
        appium --log-timestamp --allow-insecure chromedriver_autodownload
        --default-capabilities "{\"deviceName\": \"$DEVICEFARM_DEVICE_NAME\", \"platformName\":\"$DEVICEFARM_DEVICE_PLATFORM_NAME\",
        \"app\":\"$DEVICEFARM_APP_PATH\", \"udid\":\"$DEVICEFARM_DEVICE_UDID_FOR_APPIUM\", \"platformVersion\":\"$DEVICEFARM_DEVICE_OS_VERSION\",
        \"chromedriverExecutableDir\":\"$DEVICEFARM_CHROMEDRIVER_EXECUTABLE_DIR\"}"
        >> $DEVICEFARM_LOG_DIR/appiumlog.txt 2>&1 &

      - >-
        start_appium_timeout=0;
        while [ true ];
        do
            if [ $start_appium_timeout -gt 60 ];
            then
                echo "appium server never started in 60 seconds. Exiting";
                exit 1;
            fi;
            grep -i "Appium REST http interface listener started on 0.0.0.0:4723" $DEVICEFARM_LOG_DIR/appiumlog.txt >> /dev/null 2>&1;
            if [ $? -eq 0 ];
            then
                echo "Appium REST http interface listener started on 0.0.0.0:4723";
                break;
            else
                echo "Waiting for appium server to start. Sleeping for 1 second";
                sleep 1;
                start_appium_timeout=$((start_appium_timeout+1));
            fi;
        done;

  # The test phase includes commands that start your test suite execution.
  test:
    commands:
      # Your test package is downloaded in $DEVICEFARM_TEST_PACKAGE_PATH so we first change directory to that path.
      - echo "Navigate to test package directory"
      - cd $DEVICEFARM_TEST_PACKAGE_PATH

      # By default, the following command is used by Device Farm to run your Appium JUnit test.
      # Note : DeviceFarm is using the TestNG runner to run the jUnit tests.
      # The goal is to run to your tests jar file with all the dependencies jars in the CLASSPATH.
      # Alternatively, You may specify your customized command.
      # Note: For most use cases, the default command works fine.
      # Please refer "http://testng.org/doc/documentation-main.html#junit" for more options on running JUnit tests using TestNG runner from the command line.
      - ls -ltr
      - echo "Start Appium JUnit test"
      #- java -Dappium.screenshots.dir=$DEVICEFARM_SCREENSHOT_PATH org.testng.TestNG -junit -testjar *-tests.jar -d $DEVICEFARM_LOG_DIR/test-output -verbose 10
      #- mkdir temp
      #- cp -rp target/dependency-jars temp/
      #- cp -r target/*.jar* temp/
      #- mkdir -p temp/DesafioBase2MobileIOS
      #- cp -rp src temp/DesafioBase2MobileIOS
      #- cp pom.xml temp/DesafioBase2MobileIOS
      #- cd temp
      #- zip -r test_package.zip *
      #- cp test_package.zip ../target
      #- mvn -f pom.xml clean verify -Dwebdriver.driver=appium -Dcucumber.filter.tags="@app" -Dappium.automationName=$PLATFORMNAME -Denvironment=staging -Dappium.screenshots.dir=$DEVICEFARM_SCREENSHOT_PATH -Dappium.autoAcceptAlerts=true -Dappium.autoGrantPermissions=true -Dappium.platformName=$DEVICEFARM_DEVICE_PLATFORM_NAME -Dappium.app=$DEVICEFARM_APP_PATH -Dappium.udid=$DEVICEFARM_DEVICE_UDID
      #- mkdir temp_jar
      #- unzip *-tests.jar -d temp_jar
      #- export CLASSPATH=$CLASSPATH:$DEVICEFARM_TEST_PACKAGE_PATH/temp_jar
      #- cd temp_jar DesafioBase2MobileAndroid
      - echo "UDID = " $DEVICEFARM_DEVICE_UDID
      - mvn -f DesafioBase2MobileIOS/pom.xml clean verify -Dwebdriver.driver=appium -Dcucumber.filter.tags="@automatizado" -Dappium.automationName=$PLATFORMNAME -Denvironment=staging -Dappium.screenshots.dir=$DEVICEFARM_SCREENSHOT_PATH -Dappium.autoAcceptAlerts=true -Dappium.autoGrantPermissions=true -Dappium.platformName=$DEVICEFARM_DEVICE_PLATFORM_NAME -Dappium.app=$DEVICEFARM_APP_PATH -Dappium.udid=$DEVICEFARM_DEVICE_UDID_FOR_APPIUM
      - cp -Rv DesafioBase2MobileIOS/target/site $DEVICEFARM_LOG_DIR
      #- java -Dcucumber.filter.tags=@test -Dcucumber.features=classpath:features -Dcucumber.glue=classpath:demo.stepdefinitions -Dwebdriver.driver=appium -Dappium.screenshots.dir=$DEVICEFARM_SCREENSHOT_PATH -Dappium.autoAcceptAlerts=true -Dappium.platformName=iOS -Dappium.app=$DEVICEFARM_APP_PATH org.testng.TestNG -junit -testjar *-tests.jar -d $DEVICEFARM_LOG_DIR/test-output -verbose 10

  # The post test phase includes are commands that are run after your tests are executed.
  post_test:
    commands:

# The artifacts phase lets you specify the location where your tests logs, device logs will be stored.
# And also let you specify the location of your test logs and artifacts which you want to be collected by Device Farm.
# These logs and artifacts will be available through ListArtifacts API in Device Farm.
artifacts:
  # By default, Device Farm will collect your artifacts from following directories
  - $DEVICEFARM_LOG_DIR
  - $DEVICEFARM_LOG_DIR/DesafioBase2MobileIOS/target/site
